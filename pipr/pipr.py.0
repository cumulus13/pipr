

import sys
import platform
import re
from pathlib import Path
from packaging import version
from importlib import metadata
from rich.console import Console
from rich.table import Table
from rich.prompt import Confirm
from gntp.notifier import GrowlNotifier
import subprocess

REQ_FILE = "requirements.txt"
console = Console()

# Growl setup
growl = GrowlNotifier(
    applicationName="Package Checker",
    notifications=["Update", "Info"],
    defaultNotifications=["Update"]
)
growl.register()


def send_growl(title, message):
    try:
        growl.notify(
            noteType="Update",
            title=title,
            description=message,
            sticky=False,
            priority=1
        )
    except Exception as e:
        console.print(f"[red]Growl error:[/red] {e}")


def parse_requirements(file_path):
    reqs = []
    with open(file_path, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith("#"):
                continue

            # Handle conditional markers like sys_platform == "win32"
            if ";" in line:
                pkg, cond = map(str.strip, line.split(";", 1))
                if "sys_platform" in cond:
                    sys_name = platform.system().lower()
                    if "win32" in cond and sys_name != "windows":
                        continue
                    if "linux" in cond and sys_name != "linux":
                        continue
                line = pkg

            match = re.match(r"([A-Za-z0-9_.-]+)([><=]+)([\d.]+)", line)
            if match:
                name, op, ver = match.groups()
                reqs.append((name, op, ver))
            else:
                reqs.append((line, None, None))
    return reqs


def install_package(pkg, req_ver):
    """Jalankan pip install"""
    cmd = [sys.executable, "-m", "pip", "install", f"{pkg}=={req_ver}"]
    console.print(f"[green]>>> Running:[/green] {' '.join(cmd)}")
    subprocess.run(cmd)


def check_packages(reqs):
    table = Table(title="Package Version Checker", header_style="bold white")
    table.add_column("Package")
    table.add_column("Installed", style="cyan")
    table.add_column("Required", style="magenta")
    table.add_column("Status")

    for pkg, op, req_ver in reqs:
        try:
            inst_ver = metadata.version(pkg)
        except metadata.PackageNotFoundError:
            inst_ver = None

        status = ""
        color = ""
        emoji = ""

        if inst_ver is None:
            status = "[red]‚ùå Not Installed[/red]"
            emoji = "‚ùå"
            send_growl(f"{pkg} Missing", f"{pkg} is not installed.")
            if req_ver and Confirm.ask(f"Install {pkg} {req_ver}?"):
                install_package(pkg, req_ver)
            elif not req_ver and Confirm.ask(f"Install latest {pkg}?"):
                install_package(pkg, "")
            table.add_row(pkg, "-", req_ver or "-", status)
            continue

        if op and req_ver:
            iv = version.parse(inst_ver)
            rv = version.parse(req_ver)

            if iv < rv:
                color = "#FFFF00"
                emoji = "‚ö†Ô∏è"
                status = f"[{color}]Lower than required[/]"
                send_growl(f"{pkg} Outdated", f"{pkg} {inst_ver} < required {req_ver}")
                if Confirm.ask(f"Upgrade {pkg} (found {inst_ver}) to {req_ver}?"):
                    install_package(pkg, req_ver)

            elif iv > rv:
                color = "#00FFFF"
                emoji = "üí°"
                status = f"[{color}]Higher than required[/]"
                send_growl(f"{pkg} Newer", f"{pkg} {inst_ver} > required {req_ver}")
                if Confirm.ask(f"Downgrade {pkg} (found {inst_ver}) to {req_ver}?"):
                    install_package(pkg, req_ver)

            else:
                color = "#AAAAFF"
                emoji = "‚ÑπÔ∏è"
                status = f"[{color}]OK[/]"
                send_growl(f"{pkg} OK", f"{pkg} {inst_ver} matches requirement {req_ver}")

        else:
            color = "#AAAAFF"
            emoji = "‚ÑπÔ∏è"
            status = f"[{color}]No version rule[/]"
            send_growl(f"{pkg} Checked", f"{pkg} {inst_ver}")

        table.add_row(pkg, inst_ver, req_ver or "-", f"{emoji} {status}")

    console.print(table)


if __name__ == "__main__":
    if not Path(REQ_FILE).exists():
        console.print(f"[red]File {REQ_FILE} not found![/red]")
        sys.exit(1)

    requirements = parse_requirements(REQ_FILE)
    check_packages(requirements)

